// Generated by gencpp from file agv_udp/CenterCmd.msg
// DO NOT EDIT!


#ifndef AGV_UDP_MESSAGE_CENTERCMD_H
#define AGV_UDP_MESSAGE_CENTERCMD_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace agv_udp
{
template <class ContainerAllocator>
struct CenterCmd_
{
  typedef CenterCmd_<ContainerAllocator> Type;

  CenterCmd_()
    : replan()
    , reserve_area_first()
    , reserve_area_second()  {
    }
  CenterCmd_(const ContainerAllocator& _alloc)
    : replan(_alloc)
    , reserve_area_first(_alloc)
    , reserve_area_second(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _replan_type;
  _replan_type replan;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _reserve_area_first_type;
  _reserve_area_first_type reserve_area_first;

   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _reserve_area_second_type;
  _reserve_area_second_type reserve_area_second;





  typedef boost::shared_ptr< ::agv_udp::CenterCmd_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::agv_udp::CenterCmd_<ContainerAllocator> const> ConstPtr;

}; // struct CenterCmd_

typedef ::agv_udp::CenterCmd_<std::allocator<void> > CenterCmd;

typedef boost::shared_ptr< ::agv_udp::CenterCmd > CenterCmdPtr;
typedef boost::shared_ptr< ::agv_udp::CenterCmd const> CenterCmdConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::agv_udp::CenterCmd_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::agv_udp::CenterCmd_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace agv_udp

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'agv_udp': ['/home/sjtuwhl/ROBOTLAB_WS/src/agv_udp/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::agv_udp::CenterCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::agv_udp::CenterCmd_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_udp::CenterCmd_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::agv_udp::CenterCmd_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_udp::CenterCmd_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::agv_udp::CenterCmd_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::agv_udp::CenterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1f2758a33326e770ef3efda627a683a4";
  }

  static const char* value(const ::agv_udp::CenterCmd_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1f2758a33326e770ULL;
  static const uint64_t static_value2 = 0xef3efda627a683a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::agv_udp::CenterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "agv_udp/CenterCmd";
  }

  static const char* value(const ::agv_udp::CenterCmd_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::agv_udp::CenterCmd_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[]  replan\n"
"int32[] reserve_area_first\n"
"int32[] reserve_area_second\n"
;
  }

  static const char* value(const ::agv_udp::CenterCmd_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::agv_udp::CenterCmd_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.replan);
      stream.next(m.reserve_area_first);
      stream.next(m.reserve_area_second);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CenterCmd_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::agv_udp::CenterCmd_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::agv_udp::CenterCmd_<ContainerAllocator>& v)
  {
    s << indent << "replan[]" << std::endl;
    for (size_t i = 0; i < v.replan.size(); ++i)
    {
      s << indent << "  replan[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.replan[i]);
    }
    s << indent << "reserve_area_first[]" << std::endl;
    for (size_t i = 0; i < v.reserve_area_first.size(); ++i)
    {
      s << indent << "  reserve_area_first[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.reserve_area_first[i]);
    }
    s << indent << "reserve_area_second[]" << std::endl;
    for (size_t i = 0; i < v.reserve_area_second.size(); ++i)
    {
      s << indent << "  reserve_area_second[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.reserve_area_second[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // AGV_UDP_MESSAGE_CENTERCMD_H
